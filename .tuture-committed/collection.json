{
  "name": "JavaScript 测试系列实战",
  "description": "",
  "id": "f40c6ffaaaa1f",
  "created": "2020-08-20T12:04:01.397Z",
  "articles": [
    {
      "id": "5e1396b8",
      "name": "JavaScript 测试系列实战（一）：使用 Jest 和 Enzyme 测试 React 组件",
      "description": "你或许早已经知道“单元测试”“端到端测试”这些名词，但从未真正付诸实践。在这一系列实战教程中，我们将手把手带你掌握 Jest、Enzyme、Cypress 等测试利器，帮助我们从 bug 的沼泽中挣脱出来，成为一个无往不利的高阶前端开发者！本篇教程是 JavaScript 测试系列实战 的第一篇教程，首先介绍了测试的类型，然后主要通过一个 React 项目教会你如何使用 Jest 编写第一个测试，然后使用 Enzyme 对 React 组件进行浅层渲染，以方便对不同层次的组件进行细粒度测试，当学习了这篇教程之后，你将对基础的测试编写、组件的测试有一个比较好的了解。",
      "topics": [
        "React",
        "Jest",
        "Enzyme"
      ],
      "categories": [
        "前端",
        "React",
        "进阶"
      ],
      "created": "2020-08-20T12:04:01.397Z",
      "cover": "https://static.tuture.co/c/f40c6ff/js-test-cover-1.jpg"
    }
  ],
  "steps": [
    {
      "type": "step",
      "id": "7598a3f5",
      "articleId": null,
      "commit": "796276585cc5686c3d29a705e90af08df6c04101",
      "children": [
        {
          "type": "heading-two",
          "commit": "796276585cc5686c3d29a705e90af08df6c04101",
          "id": "78bc042a",
          "fixed": true,
          "children": [
            {
              "text": "Initialize project using Create React App"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".prettierrc",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".prettierrc",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "README.md",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package-lock.json",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/favicon.ico",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/index.html",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo192.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo512.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/manifest.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/robots.txt",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "796276585cc5686c3d29a705e90af08df6c04101",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
      "id": "230ba65c",
      "articleId": "5e1396b8",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
          "id": "35dbfadc",
          "fixed": true,
          "children": [
            {
              "text": "初识 Jest 单元测试"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "测试是检查代码的代码，能够大大增强我们对应用的信心。更重要的是，测试会阻止你在修复一件事情的同时破坏另一件事情，让我们能够放开手脚进行功能的添加与大规模重构。您可以测试应用程序的许多方面，从单个函数及其返回值到在浏览器中运行的复杂应用程序。万丈高楼平地起，让我们先来了解一下有哪些测试。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "测试的类型"
                }
              ],
              "id": "MXvONvusW"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "单元测试"
                }
              ],
              "id": "3Yi38H9mM"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "单元测试的目标可以是一个函数，一个类，或者一个模块。单元测试应该是相互隔离和独立的。对于给定的输入，单元测试检查结果。通过及早发现问题并避免 bug 回归，它可以帮助我们确保代码的各个部分按预期工作。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "集成测试"
                }
              ],
              "id": "9y6jGT6T8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "即使所有单元测试都通过了，我们的应用仍然可能会崩溃。集成测试则是用来测试跨模单元/模块的过程，可以很好地确保我们的代码能够作为一个整体运行。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "端到端测试(E2E)"
                }
              ],
              "id": "4CcyiHQXu"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "与其他类型的测试不同，E2E 测试总是在浏览器(或类浏览器)环境中运行。它可能是一个实际的浏览器，可以打开并在其中运行测试；也可能是一个无头（Headless）的浏览器环境，这是一个没有用户界面的浏览器。E2E 测试的重点是在我们正在运行的应用程序中模拟实际用户（例如模拟滚动、单击和键入等行为），并检查我们的应用程序是否从实际用户的角度运行良好。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一系列教程中，我们将会从零开始，一步步带你熟悉从单元测试到端到端测试的方方面面。我们将会在一个 React 项目中实践所学到的自动化测试技术。首先用 Create React App（CRA）搭建项目脚手架："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "create-react-app javascript-test-series"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后我们删除 "
                },
                {
                  "text": "src",
                  "code": true
                },
                {
                  "text": " 目录下所有预创建的文件（当然你也可以手动删除）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "rm src/*"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一切准备就绪！让我们开始吧。"
                }
              ]
            }
          ]
        },
        {
          "file": "divide.js",
          "display": true,
          "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写第一个单元测试"
                    }
                  ],
                  "id": "57wUntp3Z"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "编写一个单元测试实际上要比你想象得简单很多。首先创建 "
                    },
                    {
                      "text": "divide.js",
                      "code": true
                    },
                    {
                      "text": " ，在其中编写一个 "
                    },
                    {
                      "text": "divide",
                      "code": true
                    },
                    {
                      "text": " 函数："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "divide.js",
              "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "divide.test.js",
          "display": true,
          "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后创建测试文件 "
                    },
                    {
                      "text": "divide.test.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "divide.test.js",
              "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "作为本系列教程的第一个 Jest 测试，我们来详细讲解一下："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们先导入需要测试的单元/模块"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "test",
                          "code": true
                        },
                        {
                          "text": " 函数定义了一个"
                        },
                        {
                          "text": "测试用例",
                          "bold": true
                        },
                        {
                          "text": "，第一个参数就是"
                        },
                        {
                          "text": "用例描述",
                          "bold": true
                        },
                        {
                          "text": "，一般是一句完整的描述，例如上面的 "
                        },
                        {
                          "text": "dividing 6 by 3 equals 2",
                          "code": true
                        },
                        {
                          "text": " ；第二个参数则是一个待执行的"
                        },
                        {
                          "text": "测试函数",
                          "bold": true
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在测试函数中，最重要的组成部分就是"
                        },
                        {
                          "text": "断言",
                          "bold": true
                        },
                        {
                          "text": "（Assertion），例如上面的 "
                        },
                        {
                          "text": "expect(divide(6, 3)).toBe(2)",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "断言的核心是 "
                        },
                        {
                          "text": "expect",
                          "code": true
                        },
                        {
                          "text": " 函数，它接受一个表达式，然后后面可以调用 Matcher 来测试该表达式是否符合条件，例如这里我们就使用了最常用的 "
                        },
                        {
                          "text": "toBe",
                          "code": true
                        },
                        {
                          "text": " Matcher；Jest 还提供了大量的 Matcher，可以帮助我们写出更简洁可读的断言语句，可参考 "
                        },
                        {
                          "text": "Expect API",
                          "link": true,
                          "url": "https://jestjs.io/docs/zh-Hans/expect"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "CRA 已经为我们配置好了 Jest，这里直接运行 "
                    },
                    {
                      "text": "npx jest",
                      "code": true
                    },
                    {
                      "text": " 命令，就可以看到测试结果了："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "PASS  ./divide.test.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  ✓ dividing 6 by 3 equals 2 (5ms)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "CRA 也配置了 "
                        },
                        {
                          "text": "test",
                          "code": true
                        },
                        {
                          "text": " 命令，但是提供了比较复杂的功能配置（例如 Watch 模式等），可能会让初学 Jest 的你不知所措。因此这里建议直接使用 "
                        },
                        {
                          "text": "npx jest",
                          "code": true
                        },
                        {
                          "text": " 执行测试。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
              "hiddenLines": [
                [
                  1,
                  11
                ],
                [
                  19,
                  33
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "math.test.js",
          "display": true,
          "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写第一组测试"
                    }
                  ],
                  "id": "TL84IpcI4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "每个测试文件通常有多个测试用例。Jest 允许我们通过 "
                    },
                    {
                      "text": "describe",
                      "code": true
                    },
                    {
                      "text": " 函数对测试用例进行分组，它创建了一个可以组合多个测试的块。让我们对全局 "
                    },
                    {
                      "text": "Math",
                      "code": true
                    },
                    {
                      "text": " 对象运行一些测试（希望浏览器工程师和 Node 开源项目维护者不要来打我），创建 "
                    },
                    {
                      "text": "math.test.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "math.test.js",
              "commit": "0b710d1d9ed03c4663748ccc10b337a11bccab3f",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你也许注意到了这里我们用了 "
                        },
                        {
                          "text": "it",
                          "code": true
                        },
                        {
                          "text": " 函数而不是 "
                        },
                        {
                          "text": "test",
                          "code": true
                        },
                        {
                          "text": " 函数，这两者实际上是完全一样的。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这样对测试进行分组可以使我们的代码更加清晰。在关注应用程序的代码质量的同时，我们也应该确保测试代码的质量，这样我们才有足够的动力不断去维护测试代码，从而确保我们的项目能够保持健壮。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除了使代码更具可读性之外，它还有助于在出现错误时提供更好的错误消息。如果这里我们将第一条测试用例改为 "
                    },
                    {
                      "text": "expect(typeof Math.random()).toEqual('string')",
                      "code": true
                    },
                    {
                      "text": " ，那么再运行 "
                    },
                    {
                      "text": "npx jest",
                      "code": true
                    },
                    {
                      "text": " ，就会出现如下错误信息："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "FAIL  ./math.test.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  ● in the math global object › the random function › should return a number"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    expect(received).toEqual(expected)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    Expected value to equal:"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      \"string\""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    Received:"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      \"number\""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "是不是一目了然呢？"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "14zX4UIF3"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一小节中，我们首先了解了测试有哪些类型。然后我们在 CRA 脚手架中编写了一个简单的函数，并为之编写了第一个单元测试，熟悉了测试用例、断言、Matcher 这些关键概念，并成功地通过了测试。接着，我们又编写了一个包含多个用例的测试文件，并通过 "
                },
                {
                  "text": "describe",
                  "code": true
                },
                {
                  "text": " 函数将测试用例组织得井井有条。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
      "id": "c99d23be",
      "articleId": "5e1396b8",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "id": "81bd1efb",
          "fixed": true,
          "children": [
            {
              "text": "初识 Enzyme：编写第一个  React 组件测试"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "很显然，我们不会仅仅满足于测试像 "
                },
                {
                  "text": "divide",
                  "code": true
                },
                {
                  "text": " 那样简单的函数，我们希望能够测试一个 React 组件，但是和一个普通的 JavaScript 函数不同，测试一个 React 组件还需要两个关键的问题：1）怎么渲染待测试的组件；2）怎么测试渲染出来的组件。 "
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "所幸的是，Airbnb 作为重度使用 React 的先驱，早就提出了专门的解决方案："
                },
                {
                  "text": "Enzyme",
                  "link": true,
                  "url": "https://github.com/enzymejs/enzyme"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "安装和配置 Enzyme"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先安装 Enzyme 和相应的 React 适配器："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install enzyme enzyme-adapter-react-16"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package-lock.json",
          "display": false,
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
              "hiddenLines": [
                [
                  0,
                  2204
                ],
                [
                  2227,
                  2340
                ],
                [
                  2352,
                  2378
                ],
                [
                  2394,
                  3427
                ],
                [
                  3496,
                  4589
                ],
                [
                  4601,
                  4866
                ],
                [
                  4954,
                  6221
                ],
                [
                  6248,
                  6572
                ],
                [
                  6587,
                  6987
                ],
                [
                  6999,
                  7099
                ],
                [
                  7111,
                  7176
                ],
                [
                  7188,
                  8132
                ],
                [
                  8154,
                  8559
                ],
                [
                  8571,
                  8637
                ],
                [
                  8663,
                  10423
                ],
                [
                  10440,
                  10549
                ],
                [
                  10570,
                  10908
                ],
                [
                  10926,
                  10981
                ],
                [
                  10993,
                  11363
                ],
                [
                  11379,
                  12262
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
              "hiddenLines": [
                [
                  0,
                  4
                ],
                [
                  13,
                  13
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/setupTests.js",
          "display": true,
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们需要配置一下 Enzyme，才能在 Jest 测试文件中使用它。创建 "
                    },
                    {
                      "text": "src/setupTests.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.js",
              "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "浅层渲染"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Enzyme 提供的一个重要功能便是组件的"
                    },
                    {
                      "text": "浅层渲染",
                      "bold": true
                    },
                    {
                      "text": "（Shallow Rendering）。它允许我们在运行测试时，"
                    },
                    {
                      "text": "只渲染父组件而不渲染其所有的子组件",
                      "bold": true
                    },
                    {
                      "text": "。浅层渲染十分快速，因此非常适合单元测试。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先让我们创建一个简单的 React 组件，创建 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.test.js",
          "display": true,
          "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "编写 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件对应的测试文件 "
                    },
                    {
                      "text": "src/App.test.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.test.js",
              "commit": "9fd76e23ae77dd7c2f4811ae32c17a03256d9c21",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，这里我们用 "
                    },
                    {
                      "text": "shallow",
                      "code": true
                    },
                    {
                      "text": " 函数来浅层渲染 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件得到 "
                    },
                    {
                      "text": "app",
                      "code": true
                    },
                    {
                      "text": " ，并且调用其 "
                    },
                    {
                      "text": "containsMatchingElement",
                      "code": true
                    },
                    {
                      "text": " 来判断渲染后的 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件是否包含 "
                    },
                    {
                      "text": "<h1>Hello world!</h1>",
                      "code": true
                    },
                    {
                      "text": " 元素。"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "Enzyme 浅层渲染后的组件还包括其他测试方法，可参考 "
                        },
                        {
                          "text": "https://enzymejs.github.io/enzyme/docs/api/shallow.html",
                          "link": true,
                          "url": "https://enzymejs.github.io/enzyme/docs/api/shallow.html"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过 "
                },
                {
                  "text": "npm test",
                  "code": true
                },
                {
                  "text": " 命令，我们就可以看到刚才的测试通过了："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PASS  app/App.test.js"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  app component"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ✓ contains a header with the \"Hello world!\""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "2ee6b58449f7570a465b349455186e5916058080",
      "id": "5534ea3a",
      "articleId": "5e1396b8",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "id": "574aad07",
          "fixed": true,
          "children": [
            {
              "text": "测试更复杂的组件"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在实际的前端开发中，我们的组件要复杂很多。本着循序渐进的原则，我们稍微前进一步：来编写一个接受 "
                },
                {
                  "text": "props",
                  "code": true
                },
                {
                  "text": " 的组件，并根据数据来决定渲染结果。"
                }
              ]
            }
          ]
        },
        {
          "file": "package-lock.json",
          "display": false,
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package-lock.json",
              "commit": "2ee6b58449f7570a465b349455186e5916058080",
              "hiddenLines": [
                [
                  0,
                  3576
                ],
                [
                  3588,
                  4396
                ],
                [
                  4422,
                  4962
                ],
                [
                  4978,
                  4980
                ],
                [
                  4996,
                  7436
                ],
                [
                  7451,
                  7545
                ],
                [
                  7562,
                  8187
                ],
                [
                  8214,
                  8222
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "2ee6b58449f7570a465b349455186e5916058080",
              "hiddenLines": [
                [
                  0,
                  6
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/setupTests.js",
          "display": true,
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置 jest-enzyme"
                    }
                  ],
                  "id": "IG9G8vHW6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你应该还记得，在刚才的测试代码中，我们还是使用了 Jest 自带的 Matcher（"
                    },
                    {
                      "text": "toEqual",
                      "code": true
                    },
                    {
                      "text": "）。但实际上，社区还提供了更好的选择——专门为 Enzyme 定制的 Matcher 库："
                    },
                    {
                      "text": "enzyme-matchers",
                      "link": true,
                      "url": "https://github.com/FormidableLabs/enzyme-matchers"
                    },
                    {
                      "text": "。这些 Matcher 使得编写断言语句更轻松、更具可读性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们通过 npm 来安装 jest-enzyme："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install jest-enzyme"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "相应地在 "
                    },
                    {
                      "text": "src/setupTests.js",
                      "code": true
                    },
                    {
                      "text": " 中添加相应的配置："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.js",
              "commit": "2ee6b58449f7570a465b349455186e5916058080",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.js",
          "display": true,
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写 TodoList 组件"
                    }
                  ],
                  "id": "zQMvmKHW1"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这次，我们还是编写一个熟悉的 "
                    },
                    {
                      "text": "TodoList",
                      "code": true
                    },
                    {
                      "text": " 组件。创建 "
                    },
                    {
                      "text": "src/TodoList.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.js",
              "commit": "2ee6b58449f7570a465b349455186e5916058080",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，这个组件接受一个 "
                    },
                    {
                      "text": "tasks",
                      "code": true
                    },
                    {
                      "text": " 数组，并将其渲染成一个列表。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.test.js",
          "display": true,
          "commit": "2ee6b58449f7570a465b349455186e5916058080",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写 TodoList 组件测试"
                    }
                  ],
                  "id": "_iHe8QxJJ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "先思考一下，如果要测试上面的 "
                    },
                    {
                      "text": "TodoList",
                      "code": true
                    },
                    {
                      "text": " 组件，要考虑哪些情况？不难想到主要是两种情况："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "传入的 "
                        },
                        {
                          "text": "tasks",
                          "code": true
                        },
                        {
                          "text": " 数组为空"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "传入的 "
                        },
                        {
                          "text": "tasks",
                          "code": true
                        },
                        {
                          "text": " 数组不为空"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "对应这两种情况，我们开始编写测试。创建 "
                    },
                    {
                      "text": "src/TodoList.test.js",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.test.js",
              "commit": "2ee6b58449f7570a465b349455186e5916058080",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到在第一个测试用例中，我们使用了 "
                    },
                    {
                      "text": "toContainReact",
                      "code": true
                    },
                    {
                      "text": " 这个 Matcher，它的含义十分明显，一目了然；在后面的测试用例中，我们通过 "
                    },
                    {
                      "text": "todoList.find('li')",
                      "code": true
                    },
                    {
                      "text": " 来获取 "
                    },
                    {
                      "text": "li",
                      "code": true
                    },
                    {
                      "text": " 元素数组，并判断它的长度是否符合要求。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你也许发现我们并没有去验证 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 每一项是否符合，这是因为我们用了 Enzyme 的浅层渲染，这意味着所有的 "
                        },
                        {
                          "text": "children",
                          "code": true
                        },
                        {
                          "text": " 都是处于未渲染状态，当然就无法验证内容是否正确了。我们将在下一篇教程中讲解如何去更“深层”地去测试我们的组件。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "运行 "
                },
                {
                  "text": "npm test",
                  "code": true
                },
                {
                  "text": " ，查看测试结果，全部通过："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PASS  app/App.test.js"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PASS  app/components/ToDoList/ToDoList.test.js"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Test Suites: 2 passed, 2 total"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Tests:       4 passed, 4 total"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Snapshots:   0 total"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Time:        1.41s"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Ran all test suites."
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "abiioWnke"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在过去的两个小节中，我们了解、安装和配置了 Enzyme，并且接触了 "
                },
                {
                  "text": "shallow",
                  "code": true
                },
                {
                  "text": " 浅层渲染这个单元测试利器，并且循序渐进测试了两个 React 组件。但是你应该也注意到了，有些时候浅层渲染并不能完全满足我们的需求，Enzyme 还提供了其他渲染方式以供测试。我们在下篇教程中将讲解新的渲染方式，并介绍快照测试以及 mock 数据，不见不散哦！"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "github": "https://github.com/tuture-dev/javascript-test-series",
  "remotes": [],
  "version": "v1"
}